#!/bin/bash

# debug
# set -x

NVIM_HOME=$HOME/.nvim

. "$NVIM_HOME/inst/util.sh"

OS="$(uname -s)"

IS_LINUX=0
IS_MAC=0
IS_FREEBSD=0
IS_NETBSD=0
IS_OPENBSD=0
case "$OS" in
Linux)
	IS_LINUX=1
	;;
FreeBSD)
	IS_FREEBSD=1
	;;
NetBSD)
	IS_NETBSD=1
	;;
OpenBSD)
	IS_OPENBSD=1
	;;
Darwin)
	IS_MAC=1
	;;
*)
	# Nothing
	;;
esac

# dependency

bun_deps() {
	install "install_bun" "bun"
}

go_deps() {
	install_fzf
}

rust_deps() {
	info "install rust and modern commands"
	install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
	install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
	if [ -f $HOME/.cargo/env ]; then
		. "$HOME/.cargo/env"
	fi
	install "cargo install fd-find" "fd"
	install "cargo install ripgrep" "rg"
	install "cargo install --locked bat" "bat"
	install "cargo install eza" "eza"

	# neovim
	install "cargo install --git https://github.com/MordechaiHadad/bob --locked" "bob"
	export PATH="$PATH:$HOME/.local/share/bob/nvim-bin"
	install "bob use stable" "nvim"
}

npm_deps() {
	info "npm install packages"
	install "sudo npm install --silent -g trash-cli" "trash"
}

nvim_config() {
	info "install ~/.config/nvim/init.lua for neovim"
	mkdir -p $HOME/.config
	backup $HOME/.config/nvim
	ln -s $NVIM_HOME $HOME/.config/nvim

	# nvim-lspconfig
	local nvim_lspconfig_home="$NVIM_HOME/lua/configs/neovim/nvim-lspconfig"
	local nvim_lspconfig_setup_handlers="$nvim_lspconfig_home/setup_handlers.lua"
	if [ ! -f $nvim_lspconfig_setup_handlers ]; then
		cp $nvim_lspconfig_home/setup_handlers_sample.lua $nvim_lspconfig_setup_handlers
	fi

	# conform.nvim
	local conform_home="$NVIM_HOME/lua/configs/stevearc/conform-nvim"
	local conform_formatters_by_ft="$conform_home/formatters_by_ft.lua"
	if [ ! -f $conform_formatters_by_ft ]; then
		cp $conform_home/formatters_by_ft_sample.lua $conform_formatters_by_ft
	fi

	# # mason-null-ls.nvim
	# local mason_null_ls_home="$NVIM_HOME/lua/configs/jay-babu/mason-null-ls-nvim"
	# local mason_null_ls_setup_handlers="$mason_null_ls_home/setup_handlers.lua"
	# if [ ! -f $mason_null_ls_setup_handlers ]; then
	# 	cp $mason_null_ls_home/setup_handlers_sample.lua $mason_null_ls_setup_handlers
	# fi

	# # nvim-lint
	# local nvim_lint_home="$NVIM_HOME/lua/configs/mfussenegger/nvim-lint"
	# local nvim_lint_linters_by_ft="$nvim_lint_home/linters_by_ft.lua"
	# if [ ! -f $nvim_lint_linters_by_ft ]; then
	#     cp $nvim_lint_home/linters_by_ft_sample.lua $nvim_lint_linters_by_ft
	# fi
}

info "install for $OS"

# dependency
case "$OS" in
Linux)
	if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
		pacman_deps
	elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
		dnf_deps
	elif [ -f "/etc/gentoo-release" ]; then
		info "gentoo ($OS) is not supported, exit..."
		exit 1
	else
		# otherwise, assume it is apt
		apt_deps
	fi
	;;
Darwin)
	brew_deps
	;;
FreeBSD | NetBSD | OpenBSD)
	info "$OS is not supported, exit..."
	exit 1
	;;
*)
	info "$OS is not supported, exit..."
	exit 1
	;;
esac

bun_deps
go_deps
rust_deps
npm_deps
nvim_config

info "install for $OS - done"
